<#
    .SYNOPSIS
        Performs rmsf_manifest creation

    .DESCRIPTION
        The script parses the .xlsx generated by Cellebrite Reader and generates rsmf_manifest files.

    .PARAMETER InputFile
        Specifies the .xlsx file containing messages.

    .PARAMETER OutputDir
        Specifies the folder where to put the generated rsmf_manifest files.

    .PARAMETER GroupMessagesBy 
        Specifies how to groups messages. The default value is 'None'. 
        Other available options are Day, Week or Month.
    
    .PARAMETER MaxMessagesPerFile
        Specifies how many messages a single rsmf_manifest can contain. 
        The default value is 9999. The maximum value is 9999.

    .NOTES
        Version: 0.6
        Author: Luca Cannizzo
        Email: luca.cannizzo@pm.com
#>

Using  module .\modules\Helpers

#========================================================
# Parameters
#========================================================
param(
    [Parameter(Mandatory)]
    [ValidateScript({
        (Test-Path -Path $_) -and 
        (Test-Path -Path $_ -PathType Leaf) -and
        ($_.Extension -eq '.xlsx')
    })]
    [System.IO.FileInfo] $InputFile,

    [Parameter(Mandatory)]
    [ValidateScript({
        (Test-Path -Path $_) -and
        (Test-Path -Path $_ -PathType Container)
    })]
    [System.IO.FileInfo]$OutputDir,

    [Parameter()]$AttachmentDir = (Get-Item $InputFile).DirectoryName,

    [Parameter()]
    [ValidateSet('None', 'Day', 'Week', 'Month')]
    [String] $GroupMessagesBy = 'None',

    [Parameter()]
    [Int32]$MaxMessagesPerFile = 9999
)

#========================================================
# Modules
#========================================================
Import-Module -Name .\modules\CbXLS-ParsingLib -DisableNameChecking
Import-Module -Name .\modules\RSMF-ManifestGen -DisableNameChecking
Import-Module -Name .\modules\CbXLS-Parser -DisableNameChecking

#========================================================
# Functions
#========================================================

#========================================================
# Code
#========================================================

$VerbosePreference = 'Continue'

$Excel               = New-Object -ComObject Excel.Application
$Excel.DisplayAlerts = $False
$Excel.Visible       = $False
$Workbook            = $Excel.Workbooks.Open($InputFile)
$Sheet               = $Workbook.Sheets.Item(1)

[void] $Sheet.Cells.Item(1,1).EntireRow.Delete()
$HeaderRow = Get-HeaderRow -Worksheet $Sheet

$FieldNameList = 
    "Chat #",
    "Instant Message #", 
    "Participants",
    "Body",
    "Name",
    "From",
    "Source",
    "Status",
    "Starred Message",
    "Deleted - Instant Message",
    "Timestamp: Time"

Write-Verbose "Matching field names with column indexes..."
$FieldNameCol = Get-FieldNameCols -FieldNameList $FieldNameList -HeaderRow $HeaderRow
Write-Verbose "Matching complete!"

Write-Verbose "Retrieving attachments fields column indexes..."
$AttachmentCols  = Get-FieldMultiColumn -HeaderRow $HeaderRow -Pattern "Attachment #[0-9]+$"
Write-Verbose "Complete!"

Write-Verbose "Counting events per chat..."
$ChatNCol        = $FieldNameCol["Chat #"]
$totRow          = $Sheet.UsedRange.Rows.Count
$ChatEventsCount = Get-ChatEventsCount -Worksheet $Sheet -ChatNCol $ChatNCol -beginRow 2 -endRow $totRow
Write-Verbose "Count Complete!"

$global:Helper = [ProgressHelper]::new()
$global:Helper.Add(1, 1, "Parsing Chat", $totRow)
$global:Helper.Show()

#$Manifests  = [System.Collections.ArrayList]@()

foreach ($chat in ($ChatEventsCount.GetEnumerator()| Sort key)){
    $beginRow = $Sheet.UsedRange.Columns[$ChatNCol].Find([string]$chat.key).Row
    $endRow   = $beginRow + $chat.Value -1
    
    $evtCollectID = ($(Get-Item $InputFile).Basename, ([String]$chat.key).padleft(3,'0')) -join '_'

    $EventRows    = Get-Rows -Worksheet $Sheet -beginRow $beginRow -endRow $endRow
    $EventsGroups = Parse-Chat -EventRows $EventRows -FieldNameCols $FieldNameCol -AttachmentCols $AttachmentCols -CustodianID $CustodianID -GroupBy $GroupMessagesBy -MaxMessagesPerChat $MaxMessagesPerFile -ProgressHelper ([ref] $global:Helper) -AttachmentDir $AttachmentDir
    
    foreach ($group in $EventsGroups){
        $manifest = New-RSMFManifest -conversationList $group.conversations -participantList $group.participants -eventList $group.events -eventCollectionId $evtCollectID
        $outputFile = New-OutFilePath -OutputRootDir $OutputDir -InputFileName $InputFile -ConversationN $chat.key -EventGroupN $group.groupNumber
        Save-RSMFManifest -ManifestJSON $manifest -OutputFilePath $outputFile
        #[void] $Manifests.Add($manifest)
    }
    $global:Helper.Update(1, $EventRows.Count)
}
$Workbook.Close($False)
$Excel.Quit()
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Excel)

